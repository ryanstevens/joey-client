import React, { PropTypes, Component } from 'react';
import { WebView } from 'react-native';



class Plaid extends Component {
  render() {
    const {publicKey, selectAccount, env, product, clientName, webhook, style} = this.props;
    let uri = `https://cdn.plaid.com/link/v2/stable/link.html?key=${publicKey}&apiVersion=v2&env=${env}&product=${product}&clientName=${clientName}&isWebView=true&isMobile=true&webhook=${webhook}&selectAccount=${selectAccount}`;
  //  uri = 'https://www.lendingclub.com'
    return <MessageWebView
      style={{...style}}
      scalesPageToFit={true}
      automaticallyAdjustContentInsets={true}
      source={{uri}}
      onMessage={(e) => this.onMessage(e, this.props)}
    />
  }

  onMessage(e, props) {
    if (e.eventName ==='EXIT') {
      console.log(e);
      console.log(props);
      props.navigation.goBack();
    }
  }
}

Plaid.defaultProps = {
  publicKey: PropTypes.string.isRequired,
  env: PropTypes.string.isRequired,
  product: PropTypes.string.isRequired,
  clientName: PropTypes.string,
  webhook: PropTypes.string,
  style: PropTypes.object
}

Plaid.defaultProps = {
  clientName: 'JoeyFinancial',
  env: "sandbox",
  product: "auth,transactions",
  webhook: '',
  publicKey: 'ff962d1c86d7e4f7a273ffffaae5d4',
  style: {
    flex:1
  }
};

export default Plaid;



const patchPostMessageJsCode = `(${String(function() {
  var originalPostMessage = window.postMessage
  var patchedPostMessage = function(message, targetOrigin, transfer) {
      originalPostMessage(message, targetOrigin, transfer)
  }
  patchedPostMessage.toString = function() {
      return String(Object.hasOwnProperty).replace('hasOwnProperty', 'postMessage')
  }
  window.postMessage = patchedPostMessage
})})();`

/**
 * HAHAHA, this whole class is a disaster.  
 * Not the code, but the reason it exists.
 * https://github.com/facebook/react-native/issues/10865
 */
class MessageWebView extends React.Component {
  constructor(props) {
      super(props)
      this.postMessage = this.postMessage.bind(this)
  }
  postMessage(action) {
      this.WebView.postMessage(JSON.stringify(action))
  }
  render() {
      const { html, source, url, onMessage, ...props } = this.props
      return (
          <WebView
              {...props}
              javaScriptEnabled
              injectedJavaScript={patchPostMessageJsCode}
              source={source ? source : html ? { html } : url}
              ref={x => {this.WebView = x}}
              onMessage={e => onMessage(JSON.parse(e.nativeEvent.data))}
          />
      )
  }
}